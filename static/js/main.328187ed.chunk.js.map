{"version":3,"sources":["components/NavBar.js","components/Jumbotron.js","components/Images.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","Navbar","className","Container","Text","gameMessage","currentScore","highScore","Header","Jumbotron","style","backgroundImage","backgroundSize","images","shuffle","require","App","state","imageArray","clickedImage","initialClick","handleImageClick","imageId","setState","handleHighScore","console","log","checkImageArray","clickedImages","push","shuffledImages","includes","this","map","image","sm","md","lg","key","id","onClick","src","source","alt","name","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.328187ed.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Container from \"react-bootstrap/Container\";\r\n// import Score from './Score.jsx';\r\n// import App from 'src/App.js';\r\n// import Instructions from './InstructionsPrompt';\r\n\r\n\r\nfunction NavBar(props) {\r\n  return (\r\n    <Navbar className=\"nav\">\r\n      <Container>\r\n        <Navbar.Text className=\"nav-text\">\r\n          {/* <Instructions/> */}\r\n          {props.gameMessage}\r\n        </Navbar.Text>\r\n        <Navbar.Text className=\"nav-text\">\r\n          <p>Current Score: {props.currentScore}</p>\r\n          <p>High Score: {props.highScore}</p>\r\n          {/* <Score/> */}\r\n        </Navbar.Text>\r\n      {/* </Navbar.Collapse> */}\r\n      </Container>\r\n    </Navbar>\r\n  \r\n  );\r\n}\r\n\r\nexport default NavBar;","import React from \"react\";\r\nimport Jumbotron from 'react-bootstrap/Jumbotron';\r\n// import Container from 'react-bootstrap/Container';\r\n\r\nfunction Header() {\r\n    // var backgroundImage = {\r\n    //   backgroundImage:\"Assets/Images/Jumbotron-BG.jpg\",\r\n    // }\r\n  return (\r\n    <div>\r\n    <Jumbotron className=\"jumbotron mt-5\"  \r\n      style={{\r\n        backgroundImage:\r\n        \"url('Assets/Images/Jumbotron-BG.jpg')\",\r\n        backgroundSize: \r\n        \"cover\"\r\n        }}>\r\n        \r\n        <h1 className=\"text-center\">Delectable Desserts Memory</h1>\r\n        <p className=\"text-center instructions\">\r\n        Click on an image to earn points, but don't click on any more than once!\r\n        </p>\r\n    </Jumbotron>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;","// import React from 'react';\r\n\r\nconst images = [\r\n  {\r\n    \"id\": 1, \r\n    \"name\": \"caramelDrizzle\", \r\n    \"source\": \"Assets/Images/Dessert-1.jpg\"\r\n  },\r\n  {\r\n    \"id\": 2, \r\n    \"name\": \"oreoLayers\", \r\n    \"source\": \"Assets/Images/Dessert-2.jpg\"\r\n  },\r\n  {\r\n    \"id\": 3, \r\n    \"name\": \"chocolateDrizzle\", \r\n    \"source\": \"Assets/Images/Dessert-3.jpg\"\r\n  },\r\n  {\r\n    \"id\": 4, \r\n    \"name\": \"macaroons\", \r\n    \"source\": \"Assets/Images/Dessert-4.jpg\"\r\n  },\r\n  {\r\n    \"id\": 5, \r\n    \"name\": \"redVelvetCupcakes\", \r\n    \"source\": \"Assets/Images/Dessert-5.jpg\"\r\n  },\r\n  {\r\n    \"id\": 6, \r\n    \"name\": \"blueberries\", \r\n    \"source\": \"Assets/Images/Dessert-6.jpg\"\r\n  },\r\n  {\r\n    \"id\": 7, \r\n    \"name\": \"mousseSwirl\", \r\n    \"source\": \"Assets/Images/Dessert-7.jpg\"\r\n  },\r\n  {\r\n    \"id\": 8, \r\n    \"name\": \"unicornCupcakes\", \r\n    \"source\": \"Assets/Images/Dessert-8.jpg\"\r\n  },\r\n  {\r\n    \"id\": 9, \r\n    \"name\": \"strawberries\", \r\n    \"source\": \"Assets/Images/Dessert-9.jpg\"\r\n  },\r\n  {\r\n    \"id\": 10, \r\n    \"name\": \"chcolateDrizzleFromSpoon\", \r\n    \"source\": \"Assets/Images/Dessert-10.jpg\"\r\n  },\r\n  {\r\n    \"id\": 11, \r\n    \"name\": \"icecreamSundae\", \r\n    \"source\": \"Assets/Images/Dessert-11.jpg\"\r\n  },\r\n  {\r\n    \"id\": 12, \r\n    \"name\": \"centerOfGooeyChocolate\", \r\n    \"source\": \"Assets/Images/Dessert-12.jpg\"\r\n  }, \r\n]\r\n\r\nexport default images;\r\n\r\n","import React from \"react\";\n// import './App.css';\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport NavBar from \"./components/NavBar.js\";\nimport Header from \"./components/Jumbotron.js\";\n// import Game from \"./components/Game.js\";\nimport { MDBContainer, MDBRow, MDBCol } from \"mdbreact\";\nimport images from \"./components/Images.js\";\n\nlet shuffle = require(\"shuffle-array\");\n\nclass App extends React.Component {\n  state = {\n    imageArray: images,\n    clickedImage: [],\n    initialClick: true,\n    gameMessage: \"Choose any delectable dessert to start playing!\",\n    currentScore: 0,\n    highScore: 0\n  };\n\n  handleImageClick = imageId => {\n    // console.log(\"You clicked an image\");\n    // After first image is clicked, changing first image click from true to false.\n    // Updating game message\n    if (this.state.initialClick) {\n      this.setState({\n        initialClick: false,\n        gameMessage: \"Correct!  Yum Yum!\",\n        currentScore: 1\n      });\n      this.handleHighScore();\n      console.log(\"Initial click high score?\", this.state.highScore);\n    } else {\n      this.checkImageArray(imageId);\n      // this.handleHighScore();\n      console.log(\n        \"This is the else initial click high score\",\n        this.state.highScore\n      );\n    }\n\n    // Storing images in empty array after image is clicked.\n    const clickedImages = this.state.clickedImage;\n    clickedImages.push(imageId);\n\n    //Shuffling images after any image is clicked\n    const shuffledImages = shuffle(images);\n    this.setState({ clickedImages, imageArray: shuffledImages });\n  };\n\n  checkImageArray = imageId => {\n    const hasBeenClicked = this.state.clickedImages.includes(imageId);\n    // console.log(\"checking image array\", imageId);\n\n    if (hasBeenClicked) {\n      this.setState({\n        initialClick: true,\n        gameMessage: \"Game Over!  No Dessert For You!!! Click any image to play again\",\n        currentScore: 0\n      });\n\n      // this.handleGameReset();\n      //Update message (game over!  No dessert for you)\n      //Reset game\n      console.log(\"game over, no dessert for you\");\n    } else {\n      // super(props);\n      this.setState({\n        currentScore: this.state.currentScore + 1,\n        highScore: this.state.highScore + 0\n      });\n      // this.handleHighScore();\n      console.log(\"This is the game over high score\", this.state.highScore);\n      this.handleHighScore();\n    }\n  };\n\n  handleHighScore = () => {\n    this.setState({ highScore: this.state.highScore + 1 });\n    console.log(\"This is the handle high score function\", this.state.highScore);\n    if (this.state.highScore > this.state.currentScore) {\n      this.setState({ highScore: this.state.highScore + 0 });\n    }\n  };\n\n  // handleHighScore = () => {\n  //   if (this.state.currentScore > this.state.highScore) {\n  //     this.setState({ highScore: this.state.highScore + 1 });\n  //   }\n  // }\n\n  // handleGameReset = () => {\n  //   if (this.state.currentScore === 0) {\n  //     this.setState({ gameMessage: \"Choose any delectable dessert to start playing!\", currentScore: 0, highScore: this.state.highScore })\n  //   }\n  // }\n\n  // SAVE HIGH SCORE!!!!\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <MDBContainer>\n          <NavBar\n            gameMessage={this.state.gameMessage}\n            currentScore={this.state.currentScore}\n            highScore={this.state.highScore}\n          />\n          <MDBRow>\n            {this.state.imageArray.map(image => (\n              <MDBCol sm=\"6\" md=\"4\" lg=\"3\" key={image.id}>\n                <div className=\"card\">\n                  <img\n                    onClick={() => this.handleImageClick(image.id)}\n                    src={image.source}\n                    className=\"card-image\"\n                    alt={image.name}\n                  ></img>\n                </div>\n              </MDBCol>\n            ))}\n          </MDBRow>\n        </MDBContainer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}